using dict;

nonfix nil;

var c = {c};
isvar = matrixp;

walk u s = if isvar u && member s u then walk (s ! u) s else u;

emptystate = (emptyhdict, 0);

mzero = [];
unit x = [x];

infixl (==) ?==;
  u ?== v = \(s,c) -> case unify u v s of
              nil = mzero;
              s   = unit (s,c);
            end;

unify _ _ nil = nil;
unify u v s = case (walk u s, walk v s) of
  (u,v) = s if (isvar u) && (isvar v) && (u == v);
  (u,v) = update s u v if isvar u;
  (u,v) = update s v u if isvar v;
  ((u:us), (v:vs)) = unify us vs (unify u v s);
  (u, v) = s if u == v;
  _ = nil;
end;

callfresh f = \(s,c) -> (f (var c)) (s,c+1);

mplus [] s2 = s2;
mplus (s:ss) s2 = s:((mplus s2 ss)&);

bind [] g = mzero;
bind (s:ss) g = mplus (g s) ((bind ss g)&);

infixl (||) ?||;
g1 ?|| g2 = \(s,c) -> mplus (g1 (s,c)) (g2 (s,c));

infixl (&&) ?&&;
g1 ?&& g2 = \(s,c) -> bind (g1 (s,c)) g2;

callgoal g = g emptystate;

// fives x = x ?== 5 ?|| (\sc -> (fives x sc)&);
// sixes x = x ?== 6 ?|| (\sc -> (sixes x sc)&);
// fivesandsixes = callfresh (\x -> (fives x ?|| sixes x));
// callgoal 4 $ fivesandsixes;
// Above should yield {0}=>5 and {0}=>6 alternatingly.
